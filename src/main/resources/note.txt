现在的问题是：queue里重复数据太庞大而且每次会根据种子累积重复，导致疯狂过滤重复数据，爬取效率太低。要考虑queue里的数据去重

处理方法：redis去重

sml-rank-stars sml-str40 star  4星
http://www.dianping.com/shop/76084188/review_all

先爬餐厅大概信息，然后拿url建一个餐厅id关联表，再根据id查评论，另外些


根据餐厅分类得到平均分，判断各餐厅是高于还是低于平均分(例如，在分类平均值中，泰式：4.5星，快餐店：3.5星)
基于餐厅类别平均分，创建好评的数据子集
基于餐厅类别平均分，创建差评的数据子集
连接从步骤2到步骤3得到的两个子集
从步骤4创建顶级菜肴的评价子集，对好评和差评的数据集根据评价进行主题建模。


最近的100条评价


垃圾邮件的判别

邮箱系统如何分辨一封Email是否属于垃圾邮件？这应该属于文本挖掘的范畴，通常会采用朴素贝叶斯的方法进行判别。它的主要原理是，根据邮件正文中的单词，是否经常出现在垃圾邮件中，进行判断。例如，如果一份邮件的正文中包含“报销”、“发票”、“促销”等词汇时，该邮件被判定为垃圾邮件的概率将会比较大。

一般来说，判断邮件是否属于垃圾邮件，应该包含以下几个步骤。

第一，把邮件正文拆解成单词组合，假设某篇邮件包含100个单词。

第二，根据贝叶斯条件概率，计算一封已经出现了这100个单词的邮件，属于垃圾邮件的概率和正常邮件的概率。如果结果表明，属于垃圾邮件的概率大于正常邮件的概率。那么该邮件就会被划为垃圾邮件。

拿100好评，100差评分析出来再分析，得到好评差评的标准

工业做法
先标数据  
人工标数据【简单排列】  训练分类器【抽取特征 预测商店星级】


select shopName as  '餐厅名称',shopId,count(shopId) as '上榜次数',avgPrice as '人均',refinedScore1 as '口味',
refinedScore2 as '环境',refinedScore3 as '服务' ,address,url from t_rank_shop 
where categoryId='110' and avgPrice<150   GROUP BY shopId ORDER BY count(shopId) desc

http://blog.csdn.net/yuruixin_china/article/details/72399409
select *  from t_shop_star_child where shopId='92886319' ORDER BY subString(SPLIT_STR(url,'/',7),2)+0 desc

CREATE FUNCTION SPLIT_STR(
  x VARCHAR(255),
  delim VARCHAR(12),
  pos INT
)
RETURNS VARCHAR(255)
RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),
       LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),
       delim, '');



学术做法
情感分析  
recsys推荐系统  recsys会议会有一些文章





好评 差评

如何判断一家餐厅的质量高低，
1.好评率
2.评论数越多，可信度是否越高  →是  威尔逊区间、缺点：冷门的好店 被排下去了
3.贝叶斯评价  增加了一个补偿系数  把所有店的评价数统一   

图表

上海菜系
上海优质图谱
上海地区优质占比

select shopid,rankTime,shopName,count(*) '该时间分组条数',sum(rankNo) '排名之和', count(*)*100-sum(rankNo) as score from t_rank_shop where refinedScore1>=8.0 GROUP BY rankTime,shopId


不能有
//        		.addCookie("www.dianping.com", "_lx_utm", "utm_source%3DBaidu%26utm_medium%3Dorganic")
//        		.addCookie("www.dianping.com", "_lxsdk", "1607264e5f624-0c8286770f8631-3b3e5906-1fa400-1607264e5f7c7")
//        		.addCookie("www.dianping.com", "_lxsdk_cuid", "1607264e5f624-0c8286770f8631-3b3e5906-1fa400-1607264e5f7c7")
//        		.addCookie("www.dianping.com", "_lxsdk_s", "160d3b2ed33-59f-f5d-17c%7C%7C18")

redis-server /etc/redis/6379.conf
config set stop-writes-on-bgsave-error no

冷却定理

select shopid,GROUP_CONCAT(
		a.score
		ORDER BY
			a.rankTime DESC SEPARATOR ','),
GROUP_CONCAT(
		a.rankTime
		ORDER BY
			a.rankTime DESC SEPARATOR ',')
 from 
(SELECT
		shopid,
		rankTime,
		count(*) * 100 - sum(rankNo) AS score	FROM
		t_rank_shop
	WHERE
		refinedScore1 >= 8.0
	GROUP BY
		rankTime,
		shopId)a GROUP BY shopid

会把这家店的历史排名，根据时间来冷却，会把那些起伏落差大的店，压缩成比较稳定的进行判断

考虑一种解决方案  一家店同一天可能进了多个排行榜
所以先查出一家店的所有历史记录，然后根据rankTime排序 主要以当天的rankNo占很大权重

